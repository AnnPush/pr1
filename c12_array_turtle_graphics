/*
(Черепаховая графика) Язык Logo, особенно популярный среди пользователей 
персональных компьютеров, сделал знаменитым принцип черепаховой графики (title graphics).
Вообразите себе механическую черепаху, которая передвигается по комнате 
под управлением программы на С. ЧЯерепаха держит перо в одной из двух 
позиций, верхней или нижней. Когда перо находится в нижней позиции, черепаха 
при своем движении вычерчиваетразличные фигуры, а когда перо находится в
верхней позиции, черепаха свободно перемещается, не оставляя при этом никаких 
следов.При решении этой задачи вы смоделируете действия черепахи,
а также создадите автоматизированный блокнот для набросков.
Используйте массив floor("пол") размером 50 на 50, инициализированный нулями.
Считывайте команды из содержимого их массива. Все время отслеживайте
текущее местоположение черепахи и то, находится ли перо в настоящее время 
в верхней или нижней позиции. Предположим, что черепаха всегда начинает 
в точке пола с координатами 0, 0 с поднятым пером. Набор команд черепахи,
которые должна обработать ваша программа:
Команда. Смысл
1.       Поднять перо.
2.       Опустить перо.
3.       Повернуть направо.
4.       Повернуть налево.
5, 10.   Переместиться вперед на 10(или другое число) интервалов.
6.       Вывести на экран массив размером 50х50.
9.       Конец данных(контрольное значение).

Предположим, что черепаха находится где-то вблизи центра пола. Следующая "программа"
рисует и выводит на экран квадрат размером 12х12.
Когда черепаха перемещается с опущенным пером, устанавливайте соответствующие
элементы массива floor в 1.При выдаче команды 6 (вывести на экран) для всех элементов 
массива, в которых находится 1, отобразите на экране звездочку или любой другой символ,
который вам нравится. Для всех элементов массива, в которых находится нуль, отобразите 
на экране пробел. Напишите программу С, реализующую возможности черепашьей графики,
которые сейчас мы обсудили. Напимшите несколько программ черепашьей графики, которые 
рисуют интересные фигуры. Добавьте другие команды для увеличения мощности нашего
"черепашьего" языка.

2
5, 12
3
5, 12
3
5, 12
3
5, 12
1
6
9
*/


#include <stdio.h>
#include <stdlib.h>

#define SIZE1 50
#define SIZE2 50
#define SIZE3 15

void printArray(int array[][SIZE2], int size1, int size2);
void move(int array[][SIZE2], int p, int t, int nn);
	
int main(void)
{
	int floors[SIZE1][SIZE2] = {0};
	int a[SIZE3] = {2, 5, 12, 3, 5, 12, 3, 5, 12, 3, 5, 12, 6, 1, 9};
	int n, pen, tern = 0, command;

	for(int i = 0; i < SIZE3; i++)
	{
		
		command = a[i];
	
		
		switch(command)
		{
			case 1:
				pen = 0;
			break;

			case 2:
				pen = 1;
			break;

			case 3:
				tern = 0;
			break;

			case 4:
				tern = 1;
			break;

			case 5:
			    n = a[i + 1];
				move(floors, pen, tern, n);
				i++;
			break;
			case 6:
				printArray(floors, SIZE1, SIZE2);
			break;
			case 9:
			break;
		}

    }
}

void printArray( int array[][SIZE2], int size1, int size2)
{
	for(int i = 0; i < size2; i++)
	{
		puts(" ");
		for(int j = 0; j < size1; j++)
		{
			if(array[i][j] == 1)
			{
				printf("%s", "*");
			}
			else
			{
				printf("%s", "-");
			}
		}
	}
}

move(int array[][SIZE2], int p, int t, int nn)
{
	int nowX = 25, nowY = 20, lastX = 26, lastY = 20;

	

	if( t == 0)
	{
		if( nowY == lastY)
		{
			if(nowX < lastX)
			{
				for (int i = 0; i < nn; i++)
                {
                   if( p == 1 )
                   {
                      array[ nowX ][ nowY ] = 1;
                   }
                    nowY++;
                }
			}
			else 
			{
                for (int i = 0; i < nn; i++)
                {
                   nowY--;
                   if( p == 1 )
                      array[ nowX ][ nowY ] = 1;
                }
			}
		}
		else if( nowX == lastX)
		{
			if(nowY < lastY)
			{
				for (int i = 0; i < nn; i++)
                {
                   nowX--;
                   if( p == 1 )
                      array[ nowX ][ nowY ] = 1;
                }
			}
			else 
			{
                for (int i = 0; i < nn; i++)
                {
                   nowX++;
                   if( p == 1 )
                      array[ nowX ][ nowY ] = 1;
                }
			}
		}
	}
	else if( t == 1)
	{
		if( nowY == lastY)
		{
			if(nowX < lastX)
			{
				for (int i = 0; i < nn; i++)
                {
                   nowY--;
                   if( p == 1 )
                      array[ nowX ][ nowY ] = 1;
                }
			}
			else 
			{
                for (int i = 0; i < nn; i++)
                {
                   nowY++;
                   if( p == 1 )
                      array[ nowX ][ nowY ] = 1;
                }
			}
		}
		else if( nowX == lastX)
		{
			if(nowY < lastY)
			{
				for (int i = 0; i < nn; i++)
                {
                   nowX++;
                   if( p == 1 )
                      array[ nowX ][ nowY ] = 1;
                }
			}
			else 
			{
                for (int i = 0; i < nn; i++)
                {
                   nowX--;
                   if( p == 1 )
                      array[ nowX ][ nowY ] = 1;
                }
			}
		}
	}
	lastX = nowX;
    lastY = nowY;
}
