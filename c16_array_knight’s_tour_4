#include <stdio.h>
#define SIZE 8


void printArray(int b[][SIZE], int size);
void accessibilityHeuristic(int b[][SIZE], int ac[][SIZE], int v[], int h[], int size);
int min(int b[][SIZE], int ac[][SIZE], int v[], int h[], int size, int jj, int kk);

int main(void)
{
	
	int horizontal[SIZE] = {2, 1, -1, -2, -2, -1, 1, 2};
	int vertical[SIZE] = {-1, -2, -2, -1, 1, 2, 2, 1};
	
	int board[SIZE][SIZE] = {0};
	int accessibility[SIZE][SIZE] = {0};

	int z =0;
	
	int moveNumber;

    int currentRow = 0;
    int currentColumn = 0;  
    
	int t = 1;
		
	for( int j = 0; j< SIZE; j++)
	{
		for( int k = 0; k < SIZE; k++)
		{
			z++;
			printf("\nZ = %d\n", z);

           for( int r = 0; r< SIZE; r++)
	       {
		      for( int u = 0; u < SIZE; u++)
		      {
		         board[r][u] = 0;
		      }
	       }
	       

	       currentRow = j;
           currentColumn = k;  
       
		   board[j][k] = 1;

		   for(int i =0; i < 64; i++)
           {
		       t++;
               
	           moveNumber = min(board, accessibility, vertical, horizontal, SIZE, j, k);
			   printf("\nmoveNumber%d\n", moveNumber);

               currentRow += vertical[moveNumber];
	           currentColumn += horizontal[moveNumber];
	                   
		       if(t <= 64)
	           {
		          board[currentRow][currentColumn] = t;
				  printf("\nt%d\n", t);
		       }
			   
		   }
        t = 0;
	       puts(" ");

           printArray(board, SIZE);
		   
        }  
	   
   }		
}
      

void printArray( int b[][SIZE], int size)
{
	for(int i = 0; i < size; i++)
	{
		puts(" ");
		for(int j = 0; j < size; j++)
		{
			printf("%4d", b[i][j]);
		}
	}
}
void accessibilityHeuristic(int b[][SIZE], int ac[][SIZE], int h[], int v[], int size)
{
	int currentRow = 0;
	int currentColumn = 0;
	int preRow;
	int preColumn;

	int n = 0;


    for(int i = 0; i < 8; i++)
       {     
           for(int j = 0; j < 8; j++)
           {
			   for (int k = 0; k < 8; k++)
			   {
			       currentRow=i;    
		           currentColumn = j;

			       preRow =  currentRow;
	               preColumn = currentColumn;
		       
	               currentRow += v[k];
	               currentColumn += h[k];

		          if( currentRow < 8 && currentColumn < 8 && currentRow >= 0  && currentColumn >= 0 && b[currentRow][currentColumn] == 0)
		          {
					
			         n++;
		          }

			      currentRow = preRow;
	              currentColumn = preColumn;
			   }
			    
               ac[i][j] = n;
		       n=0;
          
	      }
       }
}

int min(int b[][SIZE], int ac[][SIZE], int v[], int h[], int size, int jj, int kk)
{
	
int mNumber;
int mNumber1;
int mNumber2;

int mNumber22;

		       
	
    
	int dd = 0;
	int m =0;

	int preRow;
	int preColumn;

	int minRow = 0 ;
	int minColumn = 0;

	int  currentRow = jj;
         int  currentColumn = kk;  

           

		   
               accessibilityHeuristic(b, ac, v, h, SIZE);
               
		      
		      

		       for(int i = 0; i < SIZE; i++)
		       {

			       preRow =  currentRow;
	               preColumn = currentColumn;
	        
	       
			       currentRow += v[i];
	               currentColumn += h[i];

			       if(  currentRow < 8 && currentColumn < 8 && currentRow >= 0  && currentColumn >= 0 && b[currentRow][currentColumn] == 0 )
                   {
				       m++;
                
		               if( m == 1 || ac[currentRow][currentColumn] < ac[minRow][minColumn] )
	                   {
						   mNumber  = i;
		                   minRow = currentRow;
		                   minColumn = currentColumn;		        
        	           }	
        	           else if(ac[currentRow][currentColumn] == ac[minRow][minColumn] && dd == 0)
        	           {
						   dd++;
						   mNumber22 = i;
						     
        	                 mNumber1  =  min(b, ac, v, h, SIZE, currentRow, currentColumn);
							 mNumber2  =  min(b, ac, v, h, SIZE, minRow, minColumn);

							 if(mNumber1 > mNumber2)
						     {
								 mNumber = mNumber22;
						     }
							

        	                 
        	           }
			       }
			      

			       currentRow = preRow;
	               currentColumn = preColumn;
		       }
		       

		        m = 0;
		        
				
                currentRow = minRow;
	            currentColumn = minColumn;              
	        

		  return mNumber;
}
