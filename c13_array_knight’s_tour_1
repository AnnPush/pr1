/*
Одной из наиболее интересных головоломок для любителей шахмат является задача 
об обходе конем шахматной доски, первоначально предложенная Эйлером. Проблема состоит в следующем: может
ли шахматная фигура, называемая конем, обойти пустую шахматную доску, при этом побывав в каждой из 64 клеток
один и только один раз? Здесь мы глубоко исследуем эту захватывающую проблем. Конь ходит "буквой Г" (на две
клетки в одном направлении и затем на одну клетку в перпендикулярном ему). Таким образом, из квадрата в центре
пустой шахматной доски конь может сделать восемь различных ходов, показанных на рисунке (они пронумерованы щт 0 до 7).
   0  1  2  3  4  5  6  7
0  -  -  -  -  -  -  -  -
1  -  -  -  2  -  1  -  -
2  -  -  3  -  -  -  0  -
3  -  -  -  -  к  -  -  -
4  -  -  4  -  -  -  7  -
5  -  -  -  5  -  6  -  -
6  -  -  -  -  -  -  -  -
7  -  -  -  -  -  -  -  -

а) Нарисуйте на листе бумаги шахматную доску размером 8 на 8 и попытайтесь обойти ее конем самостоятельно. Поместите 1
в первую клетку, в которую вы перемещаетесь, 2 во вторую клетку, 3 в третью и т. д.
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE1 8
#define SIZE2 8
#define SIZE3 8

void printArray(int b[][SIZE2], int size1, int size2);

int main(void)
{
	int board[SIZE1][SIZE2] = {0};
	int horizontal[SIZE3] = {2, 1, -1, -2, -2, -1, 1, 2};
	int vertical[SIZE3] = {-1, -2, -2, -1, 1, 2, 2, 1};

    int currentRow = 3;
	int currentColumn = 4;
	int moveNumber;
    int n = 0;
	int preRow;
	int preColumn;
	
	srand(time(NULL));

	do
    {
       if(board[currentRow][currentColumn] == 0)
	   {
	      board[currentRow][currentColumn] = n;
          n++;
	   }
	   else
	   {
		  currentRow = preRow;
	      currentColumn = preColumn;
	   }
		       
	   moveNumber = rand() % 7;

	   preRow =  currentRow;
	   preColumn = currentColumn;
		       
	   currentRow += vertical[moveNumber];
	   currentColumn += horizontal[moveNumber];
	           
	} while( currentRow < 8 && currentColumn < 8 && currentRow >= 0  && currentColumn >= 0 );
		   
	
	

	printArray(board, SIZE1, SIZE2);
}

void printArray( int b[][SIZE2], int size1, int size2)
{
	for(int i = 0; i < size1; i++)
	{
		puts(" ");
		for(int j = 0; j < size2; j++)
		{
			printf("%d", b[i][j]);
		}
	}
}

